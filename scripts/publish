#!/bin/bash

set -e

if [[ "${CI}" ]]; then
    set -x
fi

function usage() {
    if [[ "${1}" ]]; then
        echo "${1}"
    fi

    echo -n \
        "Usage: $(basename "$0") --acr ACR_NAME --tag IMAGE_TAG
Tags and pushes task images.

ACR_NAME - The ACR repository name.
IMAGE_TAG - The tag to use for all images.

options:
  --no-login     Don't attempt log into the ACR using the azure cli.
  --only IMAGE   Only publish the specified image.
"
}

# Parse args

while [[ "$#" -gt 0 ]]; do case $1 in
    --acr)
        ACR_NAME=$2
        shift
        shift
        ;;
    --tag)
        IMAGE_TAG=$2
        shift
        shift
        ;;
    --no-login)
        NO_LOGIN="1"
        shift
        ;;
    --only)
        ONLY_IMAGE=$2
        shift
        shift
        ;;
    --help)
        usage
        exit 0
        shift
        ;;
    *)
        usage "Unknown parameter passed: $1"
        shift
        shift
        ;;
    esac done

function install_oras() {
    # https://oras.land/docs/installation/
    VERSION="1.1.0"
    curl -LO "https://github.com/oras-project/oras/releases/download/v${VERSION}/oras_${VERSION}_linux_amd64.tar.gz"
    mkdir -p oras-install/
    tar -zxf oras_${VERSION}_*.tar.gz -C oras-install/
    sudo mv oras-install/oras /usr/local/bin/
    rm -rf oras_${VERSION}_*.tar.gz oras-install/
}

function deprecate_image() {
    local full_image_name_with_digest=$1
    deprecated_since=$(date --utc --iso-8601=seconds) 
    if oras discover $full_image_name_with_digest -o json | jq '.manifests[].annotations' | grep -q "vnd.microsoft.lifecycle.end-of-life.date" ; then
        echo "Lifecycle metadata annotation for $full_image_name_with_digest already exists, skip."
    else
        echo "Deprecating previous image $full_image_name_with_digest"
        oras attach \
            --artifact-type "application/vnd.microsoft.artifact.lifecycle" \
            --annotation "vnd.microsoft.artifact.lifecycle.end-of-life.date=$deprecated_since" \
            "$full_image_name_with_digest"
    fi
}

function set_lineage() {
    local full_image_name_with_digest=$1
    # if the annotation already exists, do not add it again
    if oras discover $full_image_name_with_digest -o json | jq '.manifests[].annotations."vnd.microsoft.artifact.lineage.rolling-tag"' | grep -q $IMAGE_TAG; then
        echo "Lineage annotation for $IMAGE_TAG already exists, skip."
    else
        echo "Adding $full_image_name_with_digest to lineage $IMAGE_TAG"
        oras attach \
            --artifact-type "application/vnd.microsoft.artifact.lineage" \
            --annotation "vnd.microsoft.artifact.lineage.rolling-tag=$IMAGE_TAG" \
            "$full_image_name_with_digest"
    fi
}

function publish_image() {
    local local_image=$1
    # if $2 is set, use it for published_image otherwise use $1
    if [ -z "$2" ]; then
        local published_image=$1
    else
        local published_image=$2
    fi
    local full_image_name="${ACR_NAME}.azurecr.io/${published_image}:${IMAGE_TAG}"

    local local_image_digest=$(docker inspect --format='{{.RepoDigests}}' "${local_image}" | cut -d'@' -f2 | tr -d \[\])
    local remote_image_digest=$(az acr manifest show-metadata $full_image_name | jq -r .digest)

    if [ -z "$remote_image_digest" ]; then
        echo "No remote image found, will publish a new image."
    elif [ "$local_image_digest" != "$remote_image_digest" ]; then
        # Image rolling tag exists in the registry, update the end-of-life
        # annotation for the existing image.
        deprecate_image "$full_image_name@$remote_image_digest"
    else
        echo "No changes, licycle metadata annotation will not be attached."
    fi

    echo "Publishing ${local_image} to ${full_image_name}"
    docker tag "${local_image}" "${full_image_name}"
    docker push "${full_image_name}"
    local remote_image_digest=$(az acr manifest show-metadata $full_image_name | jq -r .digest)
    set_lineage "$full_image_name@$remote_image_digest"
}

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1}" == "--help" ]; then
        usage
    else
        # Login
        if [ -z "${NO_LOGIN}" ]; then
            echo "Logging into ACR..."
            az acr login -n ${ACR_NAME}
        fi

        if ! command -v oras &> /dev/null
        then
            install_oras
        fi

        if [ "${ONLY_IMAGE}" ]; then
            publish_image ${ONLY_IMAGE}
        else
            publish_image pctasks-ingest
            publish_image pctasks-server
            publish_image pctasks-run
            publish_image pctasks-task-base
        fi

    fi

fi
