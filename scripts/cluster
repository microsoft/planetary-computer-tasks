#!/bin/bash

set -e

if [[ "${CI}" ]]; then
    set -x
fi

function usage() {
    if [[ "${1}" ]]; then
        echo "${1}"
    fi

    echo -n \
        "Usage: $(basename "$0") [OPTIONS]
Script for managing dev cluster

Subcommands:
    setup
        Create and set up the dev cluster
    update
        Updates helm charts on the dev cluster
    argo-token
        Print the argo token as an export statement
    recreate
        Delete the dev cluster and recreate it
    delete
        Delete the dev cluster
"
}

source scripts/env

SETUP=""
UPDATE=""
GET_ARGO_TOKEN=""
RECREATE=""
DELETE=""
while [[ $# -gt 0 ]]; do case $1 in
    setup)
        SETUP="--setup"
        shift
        ;;
    update)
        UPDATE="--update"
        shift
        ;;
    argo-token)
        GET_ARGO_TOKEN="--argo-token"
        shift
        ;;
    recreate)
        RECREATE="--recreate"
        shift
        ;;
    delete)
        DELETE="--delete"
        shift
        ;;
    --help)
        usage
        exit 0
        shift
        ;;
    *)
        usage "Unknown parameter passed: $1"
        exit 1
        ;;
    esac done

if [ -z "${SETUP}${UPDATE}${GET_ARGO_TOKEN}${RECREATE}${DELETE}" ]; then
    usage "No subcommand option specified"
    exit 1
fi

function create_cluster {
    if ! kind get clusters | grep -q ${KIND_CLUSTER_NAME}; then
        echo " -- CREATING KIND CLUSTER"
        KIND_EXPERIMENTAL_DOCKER_NETWORK=${DOCKER_NETWORK_NAME} kind \
            create cluster --name ${KIND_CLUSTER_NAME} \
            --config cluster/kind-config.yaml
    fi
    kind export kubeconfig --name kind-pctasks --kubeconfig cluster/kind-internal-config --internal

    echo " -- REGISTERING LOCAL IMAGE REGISTRY"
    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-registry-hosting
  namespace: kube-public
data:
  localRegistryHosting.v1: |
    host: "localhost:5001"
    help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
EOF

    if ! kubectl get namespace | grep -q argo; then
        echo " -- CREATING ARGO NAMESPACE"
        kubectl create ns argo
    fi

    helm repo add argo https://argoproj.github.io/argo-helm
    echo "Installing argo..."
    helm upgrade --install argo-workflows argo/argo-workflows \
        -n argo \
        --create-namespace \
        -f cluster/argo-values.yaml \
        --wait \
        --timeout 2m0s

    # Don't worry about errors like
    # E0303 15:59:48.181644   27243 memcache.go:255] couldn't get resource list for external.metrics.k8s.io/v1beta1: Got empty response for: external.metrics.k8s.io/v1beta1
    # https://github.com/kubernetes-sigs/custom-metrics-apiserver/issues/146

    kubectl -n argo create secret generic queue-connection-string-auth \
        --from-literal=ConnectionString='AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;DefaultEndpointsProtocol=http;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;'

}


function update_registry() {
    echo "Adding pctasks-server to local registry..."
    docker tag pctasks-server localhost:5001/pctasks-server &&
        docker push localhost:5001/pctasks-server

    echo "Adding pctasks-run to local registry..."
    docker tag pctasks-run localhost:5001/pctasks-run &&
        docker push localhost:5001/pctasks-run

    echo "Adding pctasks-ingest to local registry..."
    docker tag pctasks-ingest localhost:5001/pctasks-ingest &&
        docker push localhost:5001/pctasks-ingest

    echo "Adding pctasks-task-base to local registry..."
    docker tag pctasks-task-base localhost:5001/pctasks-task-base &&
        docker push localhost:5001/pctasks-task-base
}

function update_cluster() {

    echo "Installing dev chart..."
    helm upgrade --install \
        pctasks-dev \
        cluster/pctasks-dev \
        -n pc \
        -f cluster/dev-values.yaml \
        --create-namespace

    # Get ARGO_TOKEN
    ARGO_TOKEN="Bearer $(kubectl get secret -n pc pctasks-sa-token -o jsonpath='{.data.token}' | base64 --decode)"

    echo "Installing pctasks-server helm chart..."

    COSMOSDB_VARS=""
    if [ "${PCTASKS_COSMOSDB__URL}" ]; then
        require_env "PCTASKS_COSMOSDB__KEY";
        COSMOSDB_VARS="--set pctasks.cosmosdb.url=${PCTASKS_COSMOSDB__URL} \
            --set pctasks.cosmosdb.key=${PCTASKS_COSMOSDB__KEY}"
    fi

    if [ "${PCTASKS_COSMOSDB__TEST_CONTAINER_SUFFIX}" ]; then
        COSMOSDB_VARS="${COSMOSDB_VARS} \
            --set pctasks.cosmosdb.dev.test_container_suffix=${PCTASKS_COSMOSDB__TEST_CONTAINER_SUFFIX}"
    fi

    BATCH_VARS=""
    if [ "${PCTASKS_RUN__BATCH_URL}" ]; then
        require_env "PCTASKS_RUN__BATCH_KEY";
        require_env "PCTASKS_RUN__BATCH_DEFAULT_POOL_ID";
        BATCH_VARS="--set pctasks.run.task_runner_type=batch \
            --set pctasks.run.batch.enabled=true \
            --set pctasks.run.batch.url=${PCTASKS_RUN__BATCH_URL} \
            --set pctasks.run.batch.key=${PCTASKS_RUN__BATCH_KEY} \
            --set pctasks.run.batch.default_pool_id=${PCTASKS_RUN__BATCH_DEFAULT_POOL_ID}"
    fi

    KV_VARS=""
    if [ "${PCTASKS_RUN__KEYVAULT_URL}" ]; then
        require_env "AZURE_TENANT_ID";
        require_env "AZURE_CLIENT_ID";
        require_env "AZURE_CLIENT_SECRET";
        KV_VARS="--set pctasks.run.dev.secrets.enabled=false \
           --set pctasks.run.keyvault.enabled=true \
           --set pctasks.run.keyvault.url=${PCTASKS_RUN__KEYVAULT_URL} \
           --set pctasks.run.keyvault.sp_tenant_id=${AZURE_TENANT_ID} \
           --set pctasks.run.keyvault.sp_client_id=${AZURE_CLIENT_ID} \
           --set pctasks.run.keyvault.sp_client_secret=${AZURE_CLIENT_SECRET}"
    fi

    BLOB_VARS=""
    if [ "${PCTASKS_RUN__BLOB_ACCOUNT_NAME}" ]; then
        require_env "PCTASKS_RUN__BLOB_ACCOUNT_URL";
        require_env "PCTASKS_RUN__BLOB_ACCOUNT_KEY";
        BLOB_VARS="--set pctasks.run.blob.account_name=${PCTASKS_RUN__BLOB_ACCOUNT_NAME} \
            --set pctasks.run.blob.account_url=${PCTASKS_RUN__BLOB_ACCOUNT_URL} \
            --set pctasks.run.blob.account_key=${PCTASKS_RUN__BLOB_ACCOUNT_KEY}"
    fi

    # Streaming settings. These are unused in the integration testing, which uses azurite,
    # but must be set.
    STREAMING_TASKIO_VARS=""
    # if [ "${PCTASKS_RUN__BLOB_ACCOUNT_NAME}" ]; then
    if [ true ]; then
        STREAMING_TASKIO_VARS="--set pctasks.run.streaming_taskio_sp_tenant_id=test \
            --set pctasks.run.streaming_taskio_sp_client_id=test \
            --set pctasks.run.streaming_taskio_sp_client_secret=test \
            --set pctasks.run.streaming_task_namespace=argo"
    fi

    # Set pctasks.deploy.podAnnotations.updated to force a new deployment
    helm upgrade --install \
        pctasks-server \
        deployment/helm/published/pctasks-server/ \
        -n pc \
        -f cluster/dev-values.yaml \
        --create-namespace \
        --set pctasks.server.deploy.podAnnotations.updated="$(date)" \
        --set pctasks.run.argo.token="${ARGO_TOKEN}" ${COSMOSDB_VARS} ${BATCH_VARS} ${KV_VARS} ${BLOB_VARS} ${STREAMING_TASKIO_VARS}

    echo "Installing ingress-nginx..."
    # TODO: Move to helm chart
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/kind/deploy.yaml
    kubectl wait --namespace ingress-nginx \
        --for=condition=ready pod \
        --selector=app.kubernetes.io/component=controller \
        --timeout=90s
}

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${SETUP}" ]; then
        create_cluster
        update_registry
        update_cluster
    fi

    if [ "${UPDATE}" ]; then
        update_registry
        update_cluster
    fi

    if [ "${GET_ARGO_TOKEN}" ]; then
        echo "Use the following token for connecting to argo..."
        echo
        ARGO_TOKEN=$(echo_argo_token)
        echo "export ARGO_TOKEN=\"${ARGO_TOKEN}\""
        echo
    fi

    if [ "${RECREATE}" ]; then
        echo " -- RECREATING KIND CLUSTER"
        kind delete cluster --name ${KIND_CLUSTER_NAME}
        create_cluster
        update_cluster
    fi

    if [ "${DELETE}" ]; then
        echo " -- DELETING KIND CLUSTER"
        kind delete cluster --name ${KIND_CLUSTER_NAME}
    fi

fi
