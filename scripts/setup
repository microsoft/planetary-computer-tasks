#!/bin/bash

set -e

if [[ "${CI}" ]]; then
    set -x
fi

function usage() {
    if [[ "${1}" ]]; then
        echo "${1}"
    fi
    echo -n \
        "Usage: $(basename "$0") [OPTIONS]
Sets up this project for development.

Options:
    --azurite
        Only run the Azurite setup.
    --cosmos
        Only run the CosmosDB setup.
    --reset-cosmos
        Reset the CosmosDB emulator.
    --rm-test-containers
        Remove test containers from CosmosDB. Requires PCTASKS_COSMOSDB__TEST_CONTAINER_SUFFIX be set.
    --no-aux-servers
        Don't build non-essential devevelopment environment servers
    --clear-records
        Only clear the records tables from Azurite.
"
}

AZURITE_ONLY=""
COSMOS_ONLY=""
RESET_COSMOS_DB=""
RM_TEST_CONTAINERS=""
NO_AUX=""
while [[ $# -gt 0 ]]; do case $1 in
    --azurite)
        AZURITE_ONLY=1
        shift
        ;;
    --cosmos)
        COSMOS_ONLY=1
        shift
        ;;
    --clear-records)
        CLEAR_RECORDS=1
        shift
        ;;
    --reset-cosmos)
        RESET_COSMOS_DB=1
        COSMOS_ONLY=1
        shift
        ;;
    --rm-test-containers)
        RM_TEST_CONTAINERS=1
        COSMOS_ONLY=1
        shift
        ;;
    --no-aux-servers)
        NO_AUX="--no-aux-servers"
        shift
        ;;
    --help)
        usage
        exit 0
        shift
        ;;
    *)
        usage "Unknown parameter passed: $1"
        exit 1
        ;;
    esac done

source scripts/env

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${CLEAR_RECORDS}" ]; then
        echo "Clearing records from Azurite Tables..."
        docker-compose -f docker-compose.console.yml run --rm \
            dev \
            pctasks-dev azurite clear-records

        echo "Records cleared."
        exit 0
    fi
    if [ "${RESET_COSMOS_DB}" ]; then
        echo "Reset cosmos db..."
        docker-compose -f docker-compose.cosmosdb.yml stop cosmosdb
        docker-compose -f docker-compose.cosmosdb.yml rm -f cosmosdb
        docker volume rm pctasks_pctasks-cosmosdb-data
        docker-compose -f docker-compose.cosmosdb.yml up -d cosmosdb
    fi
    if [ "${RM_TEST_CONTAINERS}" ]; then
        if [ -z "${PCTASKS_COSMOSDB__TEST_CONTAINER_SUFFIX}" ]; then
            echo "No test container suffix set, not removing test containers."
            exit 1
        fi
        echo "Removing test containers..."
        docker-compose ${COSMOSDB_EMULATOR} -f docker-compose.console.yml run --rm \
            dev \
            pctasks-dev cosmosdb rm-test-containers;

        exit 0
    fi
    if [ -z "${AZURITE_ONLY}${COSMOS_ONLY}" ]; then

        # Copy secrets template if it doesn't exist
        if [ ! -f dev-secrets.yaml ]; then
            cp dev-secrets.template.yaml dev-secrets.yaml
        fi

        # Copy frontend settings template if it doesn't exist
        if [ ! -f pctasks_frontend/.env ]; then
            echo "Initialized default frontend settings"
            cp pctasks_frontend/.env.example pctasks_frontend/.env
        fi

        setup_docker_network

        echo " -- BUILDING CONTAINERS"
        scripts/update ${NO_AUX}

        echo " -- STARTING SERVERS"
        scripts/server --detached ${NO_AUX}

    fi

    if [ -z "${COSMOS_ONLY}" ]; then
        echo " -- SETTING UP AZURITE"
        docker-compose -f docker-compose.console.yml run --rm \
            dev \
            pctasks-dev azurite setup
    fi

    if [ -z "${AZURITE_ONLY}" ]; then
        COSMOSDB_EMULATOR="-f docker-compose.cosmosdb.yml"
        if [ "${PCTASKS_COSMOSDB__URL}" ]; then
            echo "Skipping emulator, using external CosmosDB at ${PCTASKS_COSMOSDB__URL}"
            COSMOSDB_EMULATOR=""
        fi

        echo " -- SETTING UP COSMOSDB"
        if [ "${COSMOSDB_EMULATOR}" ]; then
            if [ -z $(docker-compose ${COSMOSDB_EMULATOR} ps -q cosmosdb) ]; then

                echo "CosmosDB is not running. Starting it..."
                docker-compose ${COSMOSDB_EMULATOR} up -d cosmosdb
            fi
        fi

        docker-compose ${COSMOSDB_EMULATOR} -f docker-compose.console.yml run --rm \
            dev \
            pctasks-dev cosmosdb setup
    fi

    echo "Done."

fi
