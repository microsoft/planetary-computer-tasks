environment: "test"

pctasks:
  cosmosdb:
    url: "{{ tf.cosmosdb_url }}"
    key: "{{ tf.cosmosdb_key }}"

  server:
    host: "0.0.0.0"
    port: "80"
    appRootPath: "/tasks"
    debug: "FALSE"

    instrumentationKey: "{{ tf.instrumentation_key }}"

    access_key:
      enabled: true
      value: "{{ tf.kv_access_key }}"

    image:
      repository: "{{ tf.component_acr_name }}.azurecr.io/pctasks-server"
      tag: "{{ tf.pctasks_server_image_tag }}"

    service:
      type: ClusterIP
      port: 80
      annotations: {}

    serviceAccount:
      annotations:
        azure.workload.identity/client-id: "{{ tf.pctasks_workflow_identity_client_id }}"
        azure.workload.identity/tenant-id: "{{ tf.pctasks_workflow_identity_tenant_id }}"

    deploy:
      replicaCount: 1
      podLabels:
        azure.workload.identity/use: "true"
      podAnnotations:
        "deployed": "{{ env.DATE }}"
        azure.workload.identity/client-id: "{{ tf.pctasks_workflow_identity_client_id }}"
        azure.workload.identity/tenant-id: "{{ tf.pctasks_workflow_identity_tenant_id }}"
      nodeSelector:
        "node_group": "default"

  run:
    task_runner_type: "batch"
    streaming_task_namespace: "pc"
    streaming_task_node_group: {{ tf.aks_streaming_task_node_group_name }}
    task_poll_seconds: 30

    notifications:
      queue_name: "notifications"
      connection_string: {{ tf.sa_connection_string }}

    tables:
      account_url: {{ tf.sa_tables_account_url }}
      account_name: {{ tf.sa_account_name }}
      connection_string: {{ tf.sa_connection_string }}
      image_key_table_name: "imagekeys"

    blob:
      account_url: {{ tf.sa_blob_account_url }}
      account_name: {{ tf.sa_account_name }}
      log_blob_container: tasklogs
      task_io_blob_container: taskio

    argo:
      namespace: pc
      host: "http://argo-workflows-server.pc.svc.cluster.local:2746"
      workflow_runner_image: "{{ tf.component_acr_name }}.azurecr.io/pctasks-run:{{ tf.pctasks_run_image_tag }}"
      node_affinity:
        enabled: true
        node_group: "{{ tf.argo_wf_node_group_name }}"
      # argo token set during helm install

    workload_identity:
      enabled: true
      service_account: pctasks-server
      client_id: "{{ tf.pctasks_workflow_identity_client_id }}"
      tenant_id: "{{ tf.pctasks_workflow_identity_tenant_id }}"

    batch:
      enabled: true
      url: "{{ tf.batch_url }}"
      key: "{{ tf.batch_key }}"
      default_pool_id: "{{ tf.batch_default_pool_id }}"
      submit_threads: 0

    keyvault:
      enabled: true
      url: "{{ tf.keyvault_url }}"

    applicationinsights:
      enabled: true
      connection_string: "{{ tf.applicationinsights_connection_string }}"

pcingress:
  services:
    pctasks:
      path: "/tasks(/|$)(.*)"
      name: "pctasks-server"
      port: "80"
    argo:
      path: "/argo(/|$)(.*)"
      name: "argo-workflows-server"
      port: "2746"

  cert:
    secretName: "pctasks-tls-secret"

  ingress:
    enabled: true
    tlsHost: "planetarycomputer-test.microsoft.com"
    hosts:
      - "planetarycomputer-test.microsoft.com"
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
      nginx.ingress.kubernetes.io/proxy-buffers-number: "8"

secretProvider:
  create: true
  namespace: "pc"
  providerName: "keyvault"
  userAssignedIdentityID: "{{ env.SECRET_PROVIDER_MANAGED_IDENTITY_ID }}"
  tenantId: "{{ env.AZURE_TENANT }}"
  keyvaultName: "{{ env.KEYVAULT_NAME }}"
  keyvaultCertificateName: "{{ env.SECRET_PROVIDER_KEYVAULT_SECRET }}"
  kubernetesCertificateSecretName: "{{ env.SECRET_PROVIDER_KEYVAULT_SECRET }}"
