environment: "staging"

pctasks:
  cosmosdb:
    url: ""
    key: ""
    dev:
      enabled: false
      emulator_host: ""
      test_container_suffix: ""

  server:
    host: "0.0.0.0"
    port: "80"
    appRootPath: ""
    debug: "FALSE"
    webConcurrency: "1"
    access_key:
      enabled: false
      value: ""

    instrumentationKey: ""

    dev:
      enabled: false
      api_key: ""
      auth_token: ""

    image:
      # e.g. myacr.azurecr.io/my-repository
      repository: ""
      pullPolicy: Always
      tag: "latest"

    service:
      type: ClusterIP
      port: 80
      annotations: {}

    azure:
      tenant_id: ""
      client_id: ""
      client_secret: ""

    # Image used to run workflows.
    runner_image: ""

    # Account key to run workflows
    account_key: ""

    deploy:
      replicaCount: 1
      podAnnotations: {}
      podLabels: {}
      imagePullSecrets: []
      securityContext: {}
      podSecurityContext: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      autoscaling:
        enabled: false

    cert:
      privateKeySecretRef: "letsencrypt-staging"
      server: "https://acme-staging-v02.api.letsencrypt.org/directory"
      issuerEmail: ""
      secretName: ""

    ingress:
      enabled: false
      annotations: {}

    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""

    nameOverride: ""
    fullnameOverride: ""

  run:
    # Task runner type, one of:
    #  batch: Run tasks in Azure Batch
    #  argo: Run tasks in Argo Workflows
    #  local: Run tasks with local executor (dev)
    task_runner_type: "batch"

    # The namespace to use for Streaming Task pods
    streaming_task_namespace: "pc"
    # The node group to use for Streaming Task pods
    streaming_task_node_group: ""

    # Workflow runner type, one of:
    #  argo: Run the workflow runner in Argo
    #  local: Run the workflow runner with local executor (dev)
    workflow_runner_type: "argo"

    # The time to wait between polling task status
    # through the task runner, which can handle
    # issues that cause the task not to be run.
    task_poll_seconds: 30

    # The time to wait between checking for task
    # output, which reports the success or failure
    # of the completed task.
    check_output_seconds: 3

    dev:
      local_dev_endpoints_url: ""

      azurite:
        enabled: false
        host: ""
        port: 10000
        storage_account: "devstoreaccount1"

      secrets:
        enabled: false
        values:
          - name: LOCAL_SECRET
            value: ""

    notifications:
      queue_name: "notifications"
      connection_string: ""

    tables:
      account_url: ""
      account_name: ""
      # account_key is only used when pctasks.run.dev.azurite.enabled is true
      account_key: ""
      connection_string: ""
      image_key_table_name: "imagekeys"

    blob:
      account_url: ""
      account_name: ""
      # account_key is only used when pctasks.run.dev.azurite.enabled is true
      account_key: ""
      log_blob_container: tasklogs
      task_io_blob_container: taskio

    batch:
      enabled: true
      url: ""
      key: ""
      default_pool_id: ""
      submit_threads: 0

    argo:
      host: ""
      token: ""
      namespace: "argo"
      workflow_runner_image: ""
      node_affinity:
        enabled: false
        node_group: ""

    workload_identity:
      enabled: true
      service_account: pctasks-sa
      client_id: ""
      tenant_id: ""

    keyvault:
      enabled: true
      url: ""
      sp_tenant_id: ""
      sp_client_id: ""
      sp_client_secret: ""
