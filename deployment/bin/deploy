#!/bin/bash

set -e
source bin/lib

if [[ "${CI}" ]]; then
    set -x
fi

function usage() {
    echo -n \
        "
Usage: $(basename "$0") -t TERRAFORM_DIR [OPTS]
Deploys the project infrastructure.

Required:
    -t TERRAFORM_DIR: The terraform directory. Required.

Options:
    --plan: Only run Terraform plan.
    --skip-tf: Skips terraform apply.
    --tf-only: Only deploy the terraform infrastructure.
    --functions: Only run function publish, no terraform changes.
    --skip-tf-init: Skip running terrform init.
    --skip-functions: Don't run function publish.
    --skip-fetch-tf-vars: Skip fetching terraform variables.
    --user-auth: Use mounted Azure user credentials
    -y: Skip confirmation.

"
}


###################
# Parse arguments #
###################

while [[ "$#" -gt 0 ]]; do case $1 in
    -t)
        TERRAFORM_DIR=${2}
        shift
        shift
        ;;
    -y)
        SKIP_CONFIRM=true
        shift
        ;;
    --plan)
        PLAN_ONLY=1
        shift
        ;;
    --skip-tf)
        SKIP_TF=1
        shift
        ;;
    --skip-functions)
        SKIP_FUNCTIONS=1
        shift
        ;;
    --tf-only)
        TF_ONLY=1
        shift
        ;;
    --functions)
        SKIP_TF=1
        FUNCTIONS=1
        shift
        ;;
    --skip-tf-init)
        SKIP_TF_INIT=1
        shift
        ;;
    --skip-fetch-tf-vars)
        SKIP_FETCH_TF_VARS=1
        shift
        ;;
    --user-auth)
        export USER_AUTH=1
        shift
        ;;
    --help)
        usage
        exit 0
        shift
        ;;
    *)
        usage "Unknown parameter passed: $1"
        shift
        shift
        ;;
    esac done

###################################
# Check and configure environment #
###################################

function on_exit() {
    # Always disable shared access keys on script exit
    disable_shared_access_keys
    # Always remove IP from storage firewalls on script exit
    remove_ip_from_storage_firewalls
}

trap on_exit EXIT

# Enable shared access keys on storage accounts that must have properties read
# [storage_account]=resource_group
declare -A SAK_STORAGE_ACCOUNTS
SAK_STORAGE_ACCOUNTS=(
  ["pctasksteststaging"]="rg-pctaskstest-staging-westeurope"
  ["stbpctasksteststaging"]="rg-pctaskstest-staging-westeurope"
)

# Add client IP to firewall for storage accounts that must have properties read
# [storage_account]=resource_group
declare -A FW_STORAGE_ACCOUNTS
FW_STORAGE_ACCOUNTS=(
    ["pctesttfstate"]="pc-test-manual-resources"
    ["pctasksteststaging"]="rg-pctaskstest-staging-westeurope"
)

if [[ -z ${TERRAFORM_DIR} ]]; then
    echo "Must pass in TERRAFORM_DIR with -t"
    exit 1
fi

if [[ -z $USER_AUTH ]]; then
    require_env "ARM_SUBSCRIPTION_ID"
    require_env "ARM_TENANT_ID"
    require_env "ARM_CLIENT_ID"
    require_env "ARM_USE_OIDC"

fi

setup_env

if [ -z "$ARM_CLIENT_ID" ]; then
  export ARM_CLIENT_ID=$(az account show --query user.name -o tsv)
  echo "Using Azure CLI auth with username: ${ARM_CLIENT_ID}"
fi

# ---------------------------------------------------

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then

    # Gather environment variables from the terraform directory
    source "${TERRAFORM_DIR}"/env.sh

    require_env "DEPLOY_SECRETS_KV"
    require_env "DEPLOY_SECRETS_KV_SECRET"
    require_env "DEPLOY_SECRETS_KV_RG_NAME"
    require_env "PCTASKS_TASK_KV"
    require_env "PCTASKS_TASK_KV_RESOURCE_GROUP_NAME"

    #######################
    # Add IP to firewalls #
    #######################

    bin/kv_add_ip
    add_ip_to_storage_firewalls

    #####################
    # Deploy Terraform  #
    #####################

    source ${TERRAFORM_DIR}/env.sh


    if [ -z "${SKIP_FETCH_TF_VARS}${SKIP_TF}" ]; then

        enable_shared_access_keys

        if [ -f "${TERRAFORM_DIR}/values.tfvars" ]; then
            mv ${TERRAFORM_DIR}/values.tfvars ${TERRAFORM_DIR}/values.bak.tfvars
        fi
        bin/get_tfvars ${DEPLOY_SECRETS_KV} ${DEPLOY_SECRETS_KV_SECRET} -o ${TERRAFORM_DIR}/values.tfvars
    fi

    pushd ${TERRAFORM_DIR}

    if [ -f values.tfvars ]; then
        VARS_OPT="-var-file=values.tfvars"
    else
        echo "ERROR: You must create a values.tfvars file in ${TERRAFORM_DIR} before deploying"
        echo "values.tfvars must be pulled from keyvault, or if --skip-fetch-tf-vars is passed"
        echo "See the deployment documentation for more information"
        exit 1
    fi

    if [ -z "${SKIP_TF}" ]; then

        AUTO_APPROVE_OPT=""
        if [ "${SKIP_CONFIRM}" ]; then
            AUTO_APPROVE_OPT="-auto-approve"
        fi

        echo "Deploying infrastructure with Terraform..."
        if [ -z "${SKIP_TF_INIT}" ]; then
            terraform init --upgrade
        fi

        if [ "${PLAN_ONLY}" ]; then
            terraform plan "${VARS_OPT}"
            exit 0
        fi


        echo " --- Running terraform apply --- "
        terraform apply "${VARS_OPT}" "${AUTO_APPROVE_OPT}"
    fi

    if [ "${TF_ONLY}" ]; then
        exit 0
    fi

    ## Gather TF Output
    gather_tf_output

    popd

    ##############################
    # Remove IP from KV firewall #
    ##############################

    bin/kv_rmv_ip

    ############################
    # Render Helm chart values #
    ############################

    render_values

    ########################
    # Login to the cluster #
    ########################

    cluster_login

    ######################
    # Deploy Helm charts #
    ######################

    echo "Deploying helm charts..."

    setup_helm

    echo "=================="
    echo "===== Argo ======="
    echo "=================="

    helm upgrade --install argo-workflows helm/vendored/argo-workflows-0.41.8.tgz \
        -n pc \
        --create-namespace \
        -f "helm/argo-values.yaml" \
        --wait \
        --timeout 2m0s \
        --debug

    echo "===================="
    echo "== PCTasksIngress =="
    echo "===================="

    echo "Deploying ingress component..."
    helm upgrade --install pc-tasks-ingress helm/pc-tasks-ingress \
        -n pc \
        --create-namespace \
        --kube-context "${KUBE_CONTEXT}" \
        --wait \
        --timeout 2m0s \
        -f ${DEPLOY_VALUES_FILE}

    echo "==================="
    echo "= PCTasks Server =="
    echo "==================="

    ARGO_TOKEN="$(get_argo_token)"

    echo "Deploying PCTasks Server helm chart..."
    helm upgrade --install pctasks-server helm/published/pctasks-server \
        -n pc \
        --create-namespace \
        --kube-context "${KUBE_CONTEXT}" \
        --wait \
        --timeout 2m0s \
        -f ${DEPLOY_VALUES_FILE} \
        --set pctasks.run.argo.token="${ARGO_TOKEN}"

    echo "==================="
    echo "== nginx-ingress =="
    echo "==================="

    helm upgrade --install nginx-ingress helm/vendored/ingress-nginx-4.8.3.tgz \
        -n pc \
        --create-namespace \
        --set controller.replicaCount=1 \
        --set controller.service.externalTrafficPolicy="Local" \
        --set controller.service.loadBalancerIP="${INTERNAL_INGRESS_IP}" \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-internal"=true \
        --set controller.image.registry="mcr.microsoft.com" \
        --set controller.image.image="oss/kubernetes/ingress/nginx-ingress-controller" \
        --set controller.image.tag="v1.9.6-patched" \
        --set controller.image.digest="sha256:2383717ea3edd1652b97e5b82adf15a3e7f091d0d5d0eceb8dce4410e3a6a292" \
        --version "4.8.3"\
        --wait \
        --timeout 2m0s \
        -f bin/nginx-values.yaml

    ######################
    # Gather environment #
    ######################

    pushd ${TERRAFORM_DIR}
    export ACR_NAME=$(tf_output task_acr_name)
    export SA_ACCOUNT_NAME=$(tf_output sa_account_name)
    export SA_ACCOUNT_URL=$(tf_output sa_tables_account_url)
    export FUNCTION_APP_NAME=$(tf_output function_app_name)
    export IMAGE_TAG=$(tf_output pctasks_server_image_tag)
    popd

    #########################
    # Setup Image Key Table #
    #########################

    if [ -z "${FUNCTIONS}" ]; then

        bin/setup_storage.py \
            "${ACR_NAME}" \
            "${SA_ACCOUNT_NAME}" \
            --url "${SA_ACCOUNT_URL}" \
            --tag "${IMAGE_TAG}"
    fi

    #########################
    # Deploy Azure Function #
    #########################

    if [ -z "${SKIP_FUNCTIONS}" ]; then

        echo "Deploying Azure Functions..."

        prepare_funcs

        pushd "${SRC_DIR}/functions_deploy"
        # pipe output to /dev/null to avoid leaking secrets
        func azure functionapp publish ${FUNCTION_APP_NAME} --python > /dev/null
        popd

    fi

fi
